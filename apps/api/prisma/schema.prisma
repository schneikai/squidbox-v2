generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum MediaType {
  image
  video
}

enum Platform {
  twitter
  bluesky
  onlyfans
  jff
}

enum PostStatus {
  pending
  success
  failed
}

enum JobStatus {
  pending
  working
  success
  failed
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  oauthTokens  OAuthToken[]
  platformCredentials PlatformCredentials[]
  posts        Post[]
}

model OAuthToken {
  id           String   @id @default(cuid())
  userId       String
  platform     Platform
  accessToken  String
  refreshToken String?
  expiresIn    Int
  expiresAt    DateTime?
  username     String
  platformUserId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, platform])
}

model PlatformCredentials {
  id           String   @id @default(cuid())
  userId       String
  platform     Platform
  username     String
  password     String   // Encrypted password
  totpSecret   String?  // Optional TOTP secret for 2FA
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, platform])
}

model Post {
  id               String   @id @default(cuid())
  userId           String
  platform         Platform
  text             String
  status           PostStatus
  groupId          String   // Groups posts that should be processed together
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postResults      PostResult[]
  postMedia        PostMedia[]
}

model Media {
  id               String   @id @default(cuid())
  type             MediaType
  url              String   @unique
  localPath        String?  // Path to downloaded file
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  postMedia        PostMedia[]
  downloadResult   MediaDownloadResult?
}

model PostMedia {
  id               String   @id @default(cuid())
  postId           String
  mediaId          String
  order            Int      // Order of media in the post
  createdAt        DateTime @default(now())
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@unique([postId, mediaId])
  @@unique([postId, order])
}

model MediaDownloadResult {
  id               String   @id @default(cuid())
  mediaId          String   @unique
  status           JobStatus
  statusText       String?  // Progress text or error message
  jobId            String?  // BullMQ job id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model PostResult {
  id               String   @id @default(cuid())
  postId           String
  status           JobStatus
  statusText       String?  // Progress text or error message
  platformPostId   String?  // ID returned by the platform
  jobId            String?  // BullMQ job id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId])
}